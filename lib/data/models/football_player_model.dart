import 'package:cloud_firestore/cloud_firestore.dart';
import '../../domain/entities/football_player_entity.dart';

class FootballPlayerModel {
  final String id;
  final String userId;
  final String? fullName;
  final String? nickname;
  final String? gender;
  final int? age;
  final String? position;
  final String? preferredFoot;
  final String? nationality;
  final String? club;
  final String? jerseyNumber;
  final String? bio;
  final String? profileImageUrl;
  final double? height;
  final double? weight;
  final String? bodyType;
  final String? phoneNumber;
  final String? email;
  final String? address;
  final String? city;
  final String? country;
  final String? instagramHandle;
  final String? twitterHandle;
  final String? facebookProfile;
  final String? linkedinProfile;
  final int goals;
  final int assists;
  final int matches;
  final int yellowCards;
  final int redCards;
  final int saves;
  final int cleanSheets;
  final double goalsPerMatch;
  final double avgPoints;
  final int totalPoints;
  final List<String> awards;
  final List<String> tournaments;
  final List<String> achievements;
  final String? careerStartDate;
  final String? currentTeam;
  final List<String> previousTeams;
  final String? playingStyle;
  final String? strengths;
  final String? areasForImprovement;
  final List<String> preferredPositions;
  final String? preferredFormation;
  final String? trainingSchedule;
  final String? availability;
  final DateTime createdAt;
  final DateTime updatedAt;
  final bool isActive;
  final bool isVerified;
  final String? verificationStatus;

  const FootballPlayerModel({
    required this.id,
    required this.userId,
    this.fullName,
    this.nickname,
    this.gender,
    this.age,
    this.position,
    this.preferredFoot,
    this.nationality,
    this.club,
    this.jerseyNumber,
    this.bio,
    this.profileImageUrl,
    this.height,
    this.weight,
    this.bodyType,
    this.phoneNumber,
    this.email,
    this.address,
    this.city,
    this.country,
    this.instagramHandle,
    this.twitterHandle,
    this.facebookProfile,
    this.linkedinProfile,
    this.goals = 0,
    this.assists = 0,
    this.matches = 0,
    this.yellowCards = 0,
    this.redCards = 0,
    this.saves = 0,
    this.cleanSheets = 0,
    this.goalsPerMatch = 0.0,
    this.avgPoints = 0.0,
    this.totalPoints = 0,
    this.awards = const [],
    this.tournaments = const [],
    this.achievements = const [],
    this.careerStartDate,
    this.currentTeam,
    this.previousTeams = const [],
    this.playingStyle,
    this.strengths,
    this.areasForImprovement,
    this.preferredPositions = const [],
    this.preferredFormation,
    this.trainingSchedule,
    this.availability,
    required this.createdAt,
    required this.updatedAt,
    this.isActive = true,
    this.isVerified = false,
    this.verificationStatus,
  });

  factory FootballPlayerModel.fromJson(Map<String, dynamic> json) {
    return FootballPlayerModel(
      id: json['id'] as String,
      userId: json['userId'] as String,
      fullName: json['fullName'] as String?,
      nickname: json['nickname'] as String?,
      gender: json['gender'] as String?,
      age: json['age'] as int?,
      position: json['position'] as String?,
      preferredFoot: json['preferredFoot'] as String?,
      nationality: json['nationality'] as String?,
      club: json['club'] as String?,
      jerseyNumber: json['jerseyNumber'] as String?,
      bio: json['bio'] as String?,
      profileImageUrl: json['profileImageUrl'] as String?,
      height: (json['height'] as num?)?.toDouble(),
      weight: (json['weight'] as num?)?.toDouble(),
      bodyType: json['bodyType'] as String?,
      phoneNumber: json['phoneNumber'] as String?,
      email: json['email'] as String?,
      address: json['address'] as String?,
      city: json['city'] as String?,
      country: json['country'] as String?,
      instagramHandle: json['instagramHandle'] as String?,
      twitterHandle: json['twitterHandle'] as String?,
      facebookProfile: json['facebookProfile'] as String?,
      linkedinProfile: json['linkedinProfile'] as String?,
      goals: json['goals'] as int? ?? 0,
      assists: json['assists'] as int? ?? 0,
      matches: json['matches'] as int? ?? 0,
      yellowCards: json['yellowCards'] as int? ?? 0,
      redCards: json['redCards'] as int? ?? 0,
      saves: json['saves'] as int? ?? 0,
      cleanSheets: json['cleanSheets'] as int? ?? 0,
      goalsPerMatch: (json['goalsPerMatch'] as num?)?.toDouble() ?? 0.0,
      avgPoints: (json['avgPoints'] as num?)?.toDouble() ?? 0.0,
      totalPoints: json['totalPoints'] as int? ?? 0,
      awards: List<String>.from(json['awards'] ?? []),
      tournaments: List<String>.from(json['tournaments'] ?? []),
      achievements: List<String>.from(json['achievements'] ?? []),
      careerStartDate: json['careerStartDate'] as String?,
      currentTeam: json['currentTeam'] as String?,
      previousTeams: List<String>.from(json['previousTeams'] ?? []),
      playingStyle: json['playingStyle'] as String?,
      strengths: json['strengths'] as String?,
      areasForImprovement: json['areasForImprovement'] as String?,
      preferredPositions: List<String>.from(json['preferredPositions'] ?? []),
      preferredFormation: json['preferredFormation'] as String?,
      trainingSchedule: json['trainingSchedule'] as String?,
      availability: json['availability'] as String?,
      createdAt: (json['createdAt'] as Timestamp).toDate(),
      updatedAt: (json['updatedAt'] as Timestamp).toDate(),
      isActive: json['isActive'] as bool? ?? true,
      isVerified: json['isVerified'] as bool? ?? false,
      verificationStatus: json['verificationStatus'] as String?,
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'userId': userId,
      'fullName': fullName,
      'nickname': nickname,
      'gender': gender,
      'age': age,
      'position': position,
      'preferredFoot': preferredFoot,
      'nationality': nationality,
      'club': club,
      'jerseyNumber': jerseyNumber,
      'bio': bio,
      'profileImageUrl': profileImageUrl,
      'height': height,
      'weight': weight,
      'bodyType': bodyType,
      'phoneNumber': phoneNumber,
      'email': email,
      'address': address,
      'city': city,
      'country': country,
      'instagramHandle': instagramHandle,
      'twitterHandle': twitterHandle,
      'facebookProfile': facebookProfile,
      'linkedinProfile': linkedinProfile,
      'goals': goals,
      'assists': assists,
      'matches': matches,
      'yellowCards': yellowCards,
      'redCards': redCards,
      'saves': saves,
      'cleanSheets': cleanSheets,
      'goalsPerMatch': goalsPerMatch,
      'avgPoints': avgPoints,
      'totalPoints': totalPoints,
      'awards': awards,
      'tournaments': tournaments,
      'achievements': achievements,
      'careerStartDate': careerStartDate,
      'currentTeam': currentTeam,
      'previousTeams': previousTeams,
      'playingStyle': playingStyle,
      'strengths': strengths,
      'areasForImprovement': areasForImprovement,
      'preferredPositions': preferredPositions,
      'preferredFormation': preferredFormation,
      'trainingSchedule': trainingSchedule,
      'availability': availability,
      'createdAt': Timestamp.fromDate(createdAt),
      'updatedAt': Timestamp.fromDate(updatedAt),
      'isActive': isActive,
      'isVerified': isVerified,
      'verificationStatus': verificationStatus,
    };
  }

  factory FootballPlayerModel.fromEntity(FootballPlayerEntity entity) {
    return FootballPlayerModel(
      id: entity.id,
      userId: entity.userId,
      fullName: entity.fullName,
      nickname: entity.nickname,
      gender: entity.gender,
      age: entity.age,
      position: entity.position,
      preferredFoot: entity.preferredFoot,
      nationality: entity.nationality,
      club: entity.club,
      jerseyNumber: entity.jerseyNumber,
      bio: entity.bio,
      profileImageUrl: entity.profileImageUrl,
      height: entity.height,
      weight: entity.weight,
      bodyType: entity.bodyType,
      phoneNumber: entity.phoneNumber,
      email: entity.email,
      address: entity.address,
      city: entity.city,
      country: entity.country,
      instagramHandle: entity.instagramHandle,
      twitterHandle: entity.twitterHandle,
      facebookProfile: entity.facebookProfile,
      linkedinProfile: entity.linkedinProfile,
      goals: entity.goals,
      assists: entity.assists,
      matches: entity.matches,
      yellowCards: entity.yellowCards,
      redCards: entity.redCards,
      saves: entity.saves,
      cleanSheets: entity.cleanSheets,
      goalsPerMatch: entity.goalsPerMatch,
      avgPoints: entity.avgPoints,
      totalPoints: entity.totalPoints,
      awards: entity.awards,
      tournaments: entity.tournaments,
      achievements: entity.achievements,
      careerStartDate: entity.careerStartDate,
      currentTeam: entity.currentTeam,
      previousTeams: entity.previousTeams,
      playingStyle: entity.playingStyle,
      strengths: entity.strengths,
      areasForImprovement: entity.areasForImprovement,
      preferredPositions: entity.preferredPositions,
      preferredFormation: entity.preferredFormation,
      trainingSchedule: entity.trainingSchedule,
      availability: entity.availability,
      createdAt: entity.createdAt,
      updatedAt: entity.updatedAt,
      isActive: entity.isActive,
      isVerified: entity.isVerified,
      verificationStatus: entity.verificationStatus,
    );
  }

  FootballPlayerEntity toEntity() {
    return FootballPlayerEntity(
      id: id,
      userId: userId,
      fullName: fullName,
      nickname: nickname,
      gender: gender,
      age: age,
      position: position,
      preferredFoot: preferredFoot,
      nationality: nationality,
      club: club,
      jerseyNumber: jerseyNumber,
      bio: bio,
      profileImageUrl: profileImageUrl,
      height: height,
      weight: weight,
      bodyType: bodyType,
      phoneNumber: phoneNumber,
      email: email,
      address: address,
      city: city,
      country: country,
      instagramHandle: instagramHandle,
      twitterHandle: twitterHandle,
      facebookProfile: facebookProfile,
      linkedinProfile: linkedinProfile,
      goals: goals,
      assists: assists,
      matches: matches,
      yellowCards: yellowCards,
      redCards: redCards,
      saves: saves,
      cleanSheets: cleanSheets,
      goalsPerMatch: goalsPerMatch,
      avgPoints: avgPoints,
      totalPoints: totalPoints,
      awards: awards,
      tournaments: tournaments,
      achievements: achievements,
      careerStartDate: careerStartDate,
      currentTeam: currentTeam,
      previousTeams: previousTeams,
      playingStyle: playingStyle,
      strengths: strengths,
      areasForImprovement: areasForImprovement,
      preferredPositions: preferredPositions,
      preferredFormation: preferredFormation,
      trainingSchedule: trainingSchedule,
      availability: availability,
      createdAt: createdAt,
      updatedAt: updatedAt,
      isActive: isActive,
      isVerified: isVerified,
      verificationStatus: verificationStatus,
    );
  }

  FootballPlayerModel copyWith({
    String? id,
    String? userId,
    String? fullName,
    String? nickname,
    String? gender,
    int? age,
    String? position,
    String? preferredFoot,
    String? nationality,
    String? club,
    String? jerseyNumber,
    String? bio,
    String? profileImageUrl,
    double? height,
    double? weight,
    String? bodyType,
    String? phoneNumber,
    String? email,
    String? address,
    String? city,
    String? country,
    String? instagramHandle,
    String? twitterHandle,
    String? facebookProfile,
    String? linkedinProfile,
    int? goals,
    int? assists,
    int? matches,
    int? yellowCards,
    int? redCards,
    int? saves,
    int? cleanSheets,
    double? goalsPerMatch,
    double? avgPoints,
    int? totalPoints,
    List<String>? awards,
    List<String>? tournaments,
    List<String>? achievements,
    String? careerStartDate,
    String? currentTeam,
    List<String>? previousTeams,
    String? playingStyle,
    String? strengths,
    String? areasForImprovement,
    List<String>? preferredPositions,
    String? preferredFormation,
    String? trainingSchedule,
    String? availability,
    DateTime? createdAt,
    DateTime? updatedAt,
    bool? isActive,
    bool? isVerified,
    String? verificationStatus,
  }) {
    return FootballPlayerModel(
      id: id ?? this.id,
      userId: userId ?? this.userId,
      fullName: fullName ?? this.fullName,
      nickname: nickname ?? this.nickname,
      gender: gender ?? this.gender,
      age: age ?? this.age,
      position: position ?? this.position,
      preferredFoot: preferredFoot ?? this.preferredFoot,
      nationality: nationality ?? this.nationality,
      club: club ?? this.club,
      jerseyNumber: jerseyNumber ?? this.jerseyNumber,
      bio: bio ?? this.bio,
      profileImageUrl: profileImageUrl ?? this.profileImageUrl,
      height: height ?? this.height,
      weight: weight ?? this.weight,
      bodyType: bodyType ?? this.bodyType,
      phoneNumber: phoneNumber ?? this.phoneNumber,
      email: email ?? this.email,
      address: address ?? this.address,
      city: city ?? this.city,
      country: country ?? this.country,
      instagramHandle: instagramHandle ?? this.instagramHandle,
      twitterHandle: twitterHandle ?? this.twitterHandle,
      facebookProfile: facebookProfile ?? this.facebookProfile,
      linkedinProfile: linkedinProfile ?? this.linkedinProfile,
      goals: goals ?? this.goals,
      assists: assists ?? this.assists,
      matches: matches ?? this.matches,
      yellowCards: yellowCards ?? this.yellowCards,
      redCards: redCards ?? this.redCards,
      saves: saves ?? this.saves,
      cleanSheets: cleanSheets ?? this.cleanSheets,
      goalsPerMatch: goalsPerMatch ?? this.goalsPerMatch,
      avgPoints: avgPoints ?? this.avgPoints,
      totalPoints: totalPoints ?? this.totalPoints,
      awards: awards ?? this.awards,
      tournaments: tournaments ?? this.tournaments,
      achievements: achievements ?? this.achievements,
      careerStartDate: careerStartDate ?? this.careerStartDate,
      currentTeam: currentTeam ?? this.currentTeam,
      previousTeams: previousTeams ?? this.previousTeams,
      playingStyle: playingStyle ?? this.playingStyle,
      strengths: strengths ?? this.strengths,
      areasForImprovement: areasForImprovement ?? this.areasForImprovement,
      preferredPositions: preferredPositions ?? this.preferredPositions,
      preferredFormation: preferredFormation ?? this.preferredFormation,
      trainingSchedule: trainingSchedule ?? this.trainingSchedule,
      availability: availability ?? this.availability,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
      isActive: isActive ?? this.isActive,
      isVerified: isVerified ?? this.isVerified,
      verificationStatus: verificationStatus ?? this.verificationStatus,
    );
  }
}
